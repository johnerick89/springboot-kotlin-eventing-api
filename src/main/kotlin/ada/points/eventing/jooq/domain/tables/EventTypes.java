/*
 * This file is generated by jOOQ.
 */
package ada.points.eventing.jooq.domain.tables;


import ada.points.eventing.jooq.domain.Indexes;
import ada.points.eventing.jooq.domain.Keys;
import ada.points.eventing.jooq.domain.Test;
import ada.points.eventing.jooq.domain.tables.records.EventTypesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EventTypes extends TableImpl<EventTypesRecord> {

    private static final long serialVersionUID = -1910072006;

    /**
     * The reference instance of <code>test.EVENT_TYPES</code>
     */
    public static final EventTypes EVENT_TYPES = new EventTypes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventTypesRecord> getRecordType() {
        return EventTypesRecord.class;
    }

    /**
     * The column <code>test.EVENT_TYPES.ID</code>.
     */
    public final TableField<EventTypesRecord, Integer> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>test.EVENT_TYPES.NAME</code>.
     */
    public final TableField<EventTypesRecord, String> NAME = createField(DSL.name("NAME"), org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * Create a <code>test.EVENT_TYPES</code> table reference
     */
    public EventTypes() {
        this(DSL.name("EVENT_TYPES"), null);
    }

    /**
     * Create an aliased <code>test.EVENT_TYPES</code> table reference
     */
    public EventTypes(String alias) {
        this(DSL.name(alias), EVENT_TYPES);
    }

    /**
     * Create an aliased <code>test.EVENT_TYPES</code> table reference
     */
    public EventTypes(Name alias) {
        this(alias, EVENT_TYPES);
    }

    private EventTypes(Name alias, Table<EventTypesRecord> aliased) {
        this(alias, aliased, null);
    }

    private EventTypes(Name alias, Table<EventTypesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> EventTypes(Table<O> child, ForeignKey<O, EventTypesRecord> key) {
        super(child, key, EVENT_TYPES);
    }

    @Override
    public Schema getSchema() {
        return Test.TEST;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EVENT_TYPES_PRIMARY);
    }

    @Override
    public Identity<EventTypesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_EVENT_TYPES;
    }

    @Override
    public UniqueKey<EventTypesRecord> getPrimaryKey() {
        return Keys.KEY_EVENT_TYPES_PRIMARY;
    }

    @Override
    public List<UniqueKey<EventTypesRecord>> getKeys() {
        return Arrays.<UniqueKey<EventTypesRecord>>asList(Keys.KEY_EVENT_TYPES_PRIMARY);
    }

    @Override
    public EventTypes as(String alias) {
        return new EventTypes(DSL.name(alias), this);
    }

    @Override
    public EventTypes as(Name alias) {
        return new EventTypes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EventTypes rename(String name) {
        return new EventTypes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EventTypes rename(Name name) {
        return new EventTypes(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
